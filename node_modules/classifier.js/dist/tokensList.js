"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokensList = void 0;
const lib_1 = require("./lib");
class TokensList {
    constructor(category) {
        this.tokens = new Map();
        this.category = category;
    }
    strengthenKeyword(token) {
        var _a;
        const currentTokenProps = this.tokens.get(token);
        this.tokens.set(token, { strength: ((_a = currentTokenProps === null || currentTokenProps === void 0 ? void 0 : currentTokenProps.strength) !== null && _a !== void 0 ? _a : 0) + 1 });
    }
    weakenKeyword(token) {
        var _a;
        const currentTokenProps = this.tokens.get(token);
        this.tokens.set(token, { strength: ((_a = currentTokenProps === null || currentTokenProps === void 0 ? void 0 : currentTokenProps.strength) !== null && _a !== void 0 ? _a : 0) - 1 });
    }
    getSimilarity(value) {
        const entries = [...this.tokens.entries()];
        let similarity = 0, strength = 0;
        entries.forEach((entry) => {
            const [token, tokenProps] = entry;
            const currentSimilarity = (0, lib_1.resolveSimilarity)(token, value);
            if (currentSimilarity > similarity) {
                similarity = currentSimilarity;
                strength = tokenProps.strength;
            }
        });
        return similarity * strength;
    }
    test(token) {
        var _a, _b;
        return (_b = (_a = this.tokens.get(token)) === null || _a === void 0 ? void 0 : _a.strength) !== null && _b !== void 0 ? _b : this.getSimilarity(token);
    }
}
exports.TokensList = TokensList;
