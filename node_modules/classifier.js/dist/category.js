"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Category = void 0;
const tokensList_1 = require("./tokensList");
const { isArray } = Array;
const lib_1 = require("./lib");
class Category {
    constructor(name) {
        this.sentences = [];
        this.name = name;
        this.inferedTokens = new tokensList_1.TokensList(name);
    }
    addSentence(sentence) {
        var _a;
        const normalizedSentence = this.normalizeData(sentence);
        (_a = this.sentences) === null || _a === void 0 ? void 0 : _a.push(normalizedSentence);
        return this;
    }
    removeSentence(sentence) {
        var _a;
        this.sentences = (_a = this.sentences) === null || _a === void 0 ? void 0 : _a.filter((item) => item !== sentence);
        return this;
    }
    normalizeData(sentence) {
        return sentence.toLowerCase();
    }
    getWords(input) {
        return isArray(input) ? input.join(' ').split(' ') : input.split(' ');
    }
    analize(categories) {
        this.getWords(this.sentences).forEach((word) => {
            this.inferedTokens.strengthenKeyword(word);
        });
        categories
            .filter((category) => category.name !== this.name)
            .forEach((category) => category
            .getWords(category.sentences)
            .forEach((word) => this.inferedTokens.weakenKeyword(word)));
        return this;
    }
    resolveScore(score) {
        const positiveValues = score.filter((item) => item >= 0);
        const negativeValues = score.filter((item) => item < 0);
        const sumOfPositiveValues = positiveValues.reduce(lib_1.sumFunc, 0);
        const resolvedNegativeScore = (0, lib_1.getAbsoluteValue)(negativeValues.reduce(lib_1.sumFunc, 0));
        return sumOfPositiveValues / (resolvedNegativeScore + sumOfPositiveValues);
    }
    classify(sentence, categories) {
        this.analize(categories);
        const classifiedWords = this.getWords(this.normalizeData(sentence)).map((word) => this.inferedTokens.test(word));
        const score = this.resolveScore(classifiedWords);
        return score > 0 ? score : 0;
    }
}
exports.Category = Category;
