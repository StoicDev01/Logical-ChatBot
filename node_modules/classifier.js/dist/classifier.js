"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Classifier = void 0;
const category_1 = require("./category");
const lib_1 = require("./lib");
class Classifier {
    constructor(options) {
        this.categories = [];
        this.options = {};
        this.options = options;
    }
    learn(sentence, classifications) {
        classifications.forEach((classification) => {
            let categorie = this.categories.find((categorie) => categorie.name === classification);
            if (categorie)
                categorie.addSentence(sentence);
            else {
                categorie = new category_1.Category(classification).addSentence(sentence);
                this.categories.push(categorie);
            }
        });
    }
    normalizeData(sentence) {
        return sentence.toLowerCase();
    }
    getUnknownScore(sentence) {
        return (this.normalizeData(sentence)
            .split(' ')
            .filter((word) => !this.getTokens().includes(word)).length /
            sentence.split(' ').length);
    }
    classify(sentence) {
        var _a, _b;
        let classification = {};
        this.categories.forEach((category) => {
            classification[category.name] = category.classify(sentence, this.categories);
        });
        let result = {};
        result.unknown = this.getUnknownScore(sentence);
        const sumStrength = Object.values(classification).reduce(lib_1.sumFunc, 0) + result.unknown;
        result.unknown = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.percentualReturn)
            ? (0, lib_1.toPercent)(result.unknown / sumStrength)
            : result.unknown / sumStrength;
        for (const [name, strength] of Object.entries(classification)) {
            const value = sumStrength ? strength / sumStrength : 0;
            result[name] = ((_b = this.options) === null || _b === void 0 ? void 0 : _b.percentualReturn) ? (0, lib_1.toPercent)(value) : value;
        }
        return result;
    }
    getTokens() {
        return this.categories.flatMap((category) => category.getWords(category.sentences));
    }
    getCateforieByName(name) {
        return this.categories.find((category) => category.name === name);
    }
}
exports.Classifier = Classifier;
